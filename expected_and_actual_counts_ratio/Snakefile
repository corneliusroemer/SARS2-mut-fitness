import pandas as pd
import itertools 

# Read in the SARS-CoV-2 mutation data.
SARS_mutation_data = pd.read_csv("../results/expected_vs_actual_mut_counts/expected_vs_actual_mut_counts.csv", dtype={'codon_position':'str', 'codon_site':'str'})

# Create a list of the unique clades in the data set.
CLADES = SARS_mutation_data.clade.unique().tolist()

# Generate clade comparisons and save as strings. 
COMPARISONS = [f"{clade1}_{clade2}" for clade1, clade2  in itertools.combinations(CLADES, 2)]

# Compare both nucleotide mutations and amino acid mutations.
MUTATION_TYPE = ["nt","aa"]

rule all:
	input: 
		expand("volcano_{mutation_type}/{comparisons}.pdf", comparisons=COMPARISONS, mutation_type=MUTATION_TYPE),
		expand("distribution_{mutation_type}/{comparisons}.pdf", comparisons=COMPARISONS, mutation_type=MUTATION_TYPE),
		expand("results/pvalues_{mutation_type}.csv", mutation_type=MUTATION_TYPE)
	
rule calculate_p_values:
	input:
		"../results/expected_vs_actual_mut_counts/expected_vs_actual_mut_counts.csv"
	output:
		"results/pvalues{comparisons}_{mutation_type}.csv"
	params:
		subset="all", min_expected=0, pseudo=0.5
	script: 
		"scripts/calculate_p_values.R"

rule volcano_plot:
	input:
		expand("results/pvalues{comparisons}_{mutation_type}.csv", comparisons=COMPARISONS, mutation_type=MUTATION_TYPE)
	output:
		"volcano_{mutation_type}/{comparisons}.pdf"
	script:
		"scripts/volcano_plot.R"

rule p_distribution:
	input:
		expand("results/pvalues{comparisons}_{mutation_type}.csv", comparisons=COMPARISONS, mutation_type=MUTATION_TYPE)
	output:
		"distribution_{mutation_type}/{comparisons}.pdf"
	script:
		"scripts/p_distribution.R"

rule combine_data:
	input:
		expand("results/pvalues{comparisons}_{mutation_type}.csv", comparisons=COMPARISONS, mutation_type=MUTATION_TYPE)
	output:
		"results/pvalues_{mutation_type}.csv"
	shell:
		"awk '(NR == 1) || (FNR > 1)' results/pvalues*_*_{wildcards.mutation_type}.csv > {output}"
